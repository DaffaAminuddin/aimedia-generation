import React from 'react';
import type { AspectRatio } from '../types';
import { ImageIcon, ErrorIcon, VideoIcon, DownloadIcon } from './icons';
import { downloadFile, sanitizeFilename } from '../utils';

interface ImageDisplayProps {
  image: string | null;
  isLoading: boolean;
  error: string | null;
  aspectRatio: AspectRatio;
  generationProgress: string | null;
  onSendToVideo?: (imageData: string) => void;
  prompt?: string;
}

const ImageDisplay: React.FC<ImageDisplayProps> = ({ image, isLoading, error, aspectRatio, generationProgress, onSendToVideo, prompt }) => {
  const getAspectRatioClass = () => {
    switch (aspectRatio) {
      case '16:9': return 'aspect-[16/9]';
      case '9:16': return 'aspect-[9/16]';
      case '4:3': return 'aspect-[4/3]';
      case '3:4': return 'aspect-[3/4]';
      case '1:1':
      default:
        return 'aspect-square';
    }
  };

  const handleDownload = () => {
    if (image) {
      const filename = `${sanitizeFilename(prompt || 'generated_image')}_${Date.now()}.jpeg`;
      downloadFile(image, filename);
    }
  };

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center h-full text-center text-gray-400 animate-pulse-fast p-4">
          <ImageIcon className="w-16 h-16 mb-4 opacity-50" />
          <p className="font-medium">{generationProgress || 'Generating your masterpiece...'}</p>
          <p className="text-sm text-gray-500">This may take a moment.</p>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex flex-col items-center justify-center h-full text-red-400 p-4 bg-red-900/20 rounded-lg">
          <ErrorIcon className="w-16 h-16 mb-4" />
          <p className="font-bold text-lg">Oops! Something went wrong.</p>
          <p className="text-sm text-center text-red-300 max-w-md">{error}</p>
        </div>
      );
    }

    if (image) {
      return (
        <div className="relative group w-full h-full">
          <img
            src={image}
            alt="Generated by AI"
            className="w-full h-full object-contain rounded-lg transition-opacity duration-500 opacity-0"
            onLoad={(e) => e.currentTarget.style.opacity = '1'}
          />
           <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-4 rounded-lg">
            <button
                onClick={handleDownload}
                className="flex items-center gap-2 bg-gray-100/90 hover:bg-white text-gray-900 font-bold py-2 px-4 rounded-lg transition-all transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 focus:ring-white"
            >
                <DownloadIcon className="w-5 h-5" />
                Download
            </button>
            {onSendToVideo && (
              <button
                onClick={() => onSendToVideo(image)}
                className="flex items-center gap-2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg transition-all transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 focus:ring-purple-500"
              >
                <VideoIcon className="w-5 h-5" />
                Use for Video
              </button>
            )}
          </div>
        </div>
      );
    }

    return (
      <div className="flex flex-col items-center justify-center h-full text-gray-500">
        <ImageIcon className="w-24 h-24 mb-4 opacity-30" />
        <p className="text-lg font-medium">Your generated image will appear here</p>
        <p className="text-sm">Adjust settings and write a prompt to start</p>
      </div>
    );
  };

  return (
    <div className={`w-full bg-gray-900/50 backdrop-blur-sm border border-dashed border-gray-700 rounded-2xl p-4 flex items-center justify-center transition-all duration-300 ${getAspectRatioClass()}`}>
      {renderContent()}
    </div>
  );
};

export default ImageDisplay;